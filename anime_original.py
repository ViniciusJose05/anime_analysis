# -*- coding: utf-8 -*-
"""anime.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OwJb1_8QjbIvOSElGqKC8x-H_iecRHnA

# An√°lise de Dados em S√©ries de Anime:  G√™neros, Avalia√ß√µes e Tend√™ncias

### Equipe:
* Maria J√∫lia Silva Fonseca Guedes Nobre
* Vin√≠cius Jos√© Arag√£o de Almeida Barrozo

### Objetivos:
- Identificar os g√™neros mais frequentes.
- Avaliar quais g√™neros t√™m as melhores (e piores) notas m√©dias.
- Descobrir as combina√ß√µes de g√™neros mais comuns.
- Analisar a rela√ß√£o entre popularidade e avalia√ß√£o.
- Testar um modelo preditivo baseado nas avalia√ß√µes.

# 1. Inicializa√ß√£o da Database

Download dos arquivos via API do kaggle e cria√ß√£o do dataframe inicial
"""

import polars as pl

# Baixar e carregar o dataset
anime_polars = pl.read_csv("H:\\Documentos\\DB_Animes\\databases\\anime.csv", null_values="Unknown")

anime_polars.head()

"""# 2. Pr√© Processamento

###  2.1. Remover valores nulos em colunas importantes (`Genres` e `Scores`)
"""

df_clean = anime_polars.filter(
    (anime_polars['Genres'].is_not_null()) & (anime_polars['Score'].is_not_null())
)

print(df_clean)

"""### 2.2. Separar a coluna `Genres` em uma lista"""

df_clean = df_clean.with_columns(
    pl.col('Genres')
    .str.replace("Hentai", "Adult Content")
    .str.split(", ")  # converte para lista
)

print(df_clean)

"""###  2.3. Criar coluna com combina√ß√£o ordenada dos g√™neros"""


def process_genres(genres):
    try:
        if genres is not None and len(genres) > 0:
            return ", ".join(sorted(genres))
        else:
            return ""
    except (TypeError, AttributeError):
        return ""


df_clean = df_clean.with_columns(
    pl.col('Genres').map_elements(process_genres, return_dtype=pl.Utf8).alias('Genres_combination')
)
# download em formato json da database polars
df_clean.write_json('df_clean.json')

"""# 3. An√°lises Explorat√≥rias"""

import plotly.express as px

# Explodir para an√°lise individual de g√™neros
df_exploded = df_clean.explode('Genres')

print(df_clean)

"""### 3.1. G√™neros mais frequentes

"""

genero_freq = (
    df_exploded.group_by('Genres')
    .len()
    .sort('len', descending=True)
    .rename({'len': 'Frequencia'})
)

px.bar(genero_freq.to_pandas(), x='Genres', y='Frequencia', title='G√™neros Mais Frequentes').show()

"""### 3.2. Nota m√©dia por g√™nero"""

genero_score = (
    df_exploded.group_by('Genres')
    .agg(pl.col('Score').mean().alias('Nota M√©dia'))
    .sort('Nota M√©dia', descending=True)
)

px.bar(genero_score.head(15).to_pandas(), x='Genres', y='Nota M√©dia', title='Top 15 G√™neros com Melhores Notas').show()
px.bar(genero_score.tail(15).to_pandas(), x='Genres', y='Nota M√©dia', title='15 G√™neros com Piores Notas').show()

"""### 3.3. Combina√ß√µes de g√™neros mais comuns"""

df_combos = df_clean.filter(pl.col('Genres').list.len() > 1)

combo_freq = (
    df_combos
    .group_by('Genres_combination')
    .agg(pl.count().alias('Frequencia'))
    .sort('Frequencia', descending=True)
)

px.bar(combo_freq.head(15).to_pandas(), x='Genres_combination', y='Frequencia',
       title='üîó Combina√ß√µes de G√™neros Mais Comuns (com 2 ou mais g√™neros)').show()

"""### 3.4. Est√∫dios com melhor nota m√©dia

"""

df_studios = df_clean.filter(
    (pl.col('Studios').is_not_null()) & (pl.col('Studios') != "None")
)

# Agrupar por est√∫dio e calcular m√©dia e contagem
studio_avg = (
    df_studios
    .group_by('Studios')
    .agg([
        pl.col('Score').mean().alias('Nota M√©dia'),
        pl.count().alias('Quantidade de Animes')
    ])
    .filter(pl.col('Quantidade de Animes') >= 5)
    .sort('Nota M√©dia', descending=True)
)

fig = px.bar(
    studio_avg.head(15).to_pandas(),  # Top 15 est√∫dios com melhor nota m√©dia
    x='Studios',
    y='Nota M√©dia',
    title='üé¨ Est√∫dios com as Melhores Notas M√©dias (com pelo menos 5 animes)',
    text='Nota M√©dia',
    labels={'Studios': 'Est√∫dio', 'Nota M√©dia': 'Nota M√©dia'}
)
fig.update_traces(texttemplate='%{text:.2f}', textposition='outside')
fig.update_layout(xaxis_tickangle=-45)
fig.show()

""" ### 3.5. Rela√ß√£o entre popularidade e avalia√ß√£o"""

relacao_popularidade = df_clean.select(['Score', 'Members', 'Genres_combination']).to_pandas()

px.scatter(relacao_popularidade, x='Score', y='Members', color='Genres_combination',
           size='Members', hover_data=['Genres_combination'],
           title='Rela√ß√£o entre Nota e Popularidade por G√™nero').show()

"""# 4. Modelo SVM para predi√ß√£o de notas

### 4.1. Filtragem das colunas necess√°rias
"""

df_clean.columns

df_para_ml = df_clean.select(
    ['MAL_ID', 'Name', 'Genres', 'Score']
)

df_para_ml_com_membros = df_clean.select(
    ['MAL_ID', 'Name', 'Genres', 'Score', 'Members']
)

"""### 4.2. One-Hot Encoding nos generos das listas de cada linha

Uso de Machine Learning utilizando a database a fim de validar as transforma√ß√µes realizadas e uso da mesma
"""


def one_hot_encode(df, column_name):
    # Get all unique genres
    all_genres = df[column_name].explode().unique().sort()

    expressions = []
    for genre in all_genres:
        expressions.append(
            pl.col(column_name).list.contains(genre).alias(f"{column_name}_{genre}")
        )

    df = df.with_columns(expressions)
    return df.drop(column_name)


df_para_ml = one_hot_encode(df_para_ml, 'Genres')
df_para_ml = df_para_ml.drop('Name', 'MAL_ID')

df_para_ml_com_membros = one_hot_encode(df_para_ml_com_membros, 'Genres')
df_para_ml_com_membros = df_para_ml_com_membros.drop('Name', 'MAL_ID')

df_para_ml.head(), df_para_ml_com_membros.head()

# download dos dataframes polars em csv
df_para_ml.write_csv('df_para_ml.csv')
df_para_ml_com_membros.write_csv('df_para_ml_com_membros.csv')

"""### 4.3. Fun√ß√£o de treinamento e teste

Implementa√ß√£o de modelo de SVM utilizando 10-10-fold para predi√ß√£o da nota baseado em generos, contendo ou n√£o o numero de membros de cada entrada.
"""

from sklearn.model_selection import KFold
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error
import numpy as np


def train_and_evaluate_knn(df, n_neighbors=5):
    # Separate features (X) and target (y)
    # Assuming 'Score' is the target variable and the rest are features
    X = df.drop('Score').to_numpy()
    y = df['Score'].to_numpy()

    # Define the number of folds
    n_folds = 10

    # Initialize KFold
    kf = KFold(n_splits=n_folds, shuffle=True, random_state=42)

    # Initialize list to store evaluation scores
    mse_scores = []

    # Loop through each fold
    for train_index, test_index in kf.split(X):
        X_train, X_test = X[train_index], X[test_index]
        y_train, y_test = y[train_index], y[test_index]

        # Initialize the KNeighborsRegressor model
        model = KNeighborsRegressor(n_neighbors=n_neighbors)

        # Train the model
        model.fit(X_train, y_train)

        # Predict on the test set
        y_pred = model.predict(X_test)

        # Evaluate the model using Mean Squared Error
        mse = mean_squared_error(y_test, y_pred)
        mse_scores.append(mse)

    # Calculate the average MSE across all folds
    average_mse = np.mean(mse_scores)

    return average_mse, mse_scores


"""### 4.4. Resultados do modelo

4.4.1. Modelo somente com Score e generos
"""

average_mse, mse_scores = train_and_evaluate_knn(df_para_ml)
print("MSE por fold:", mse_scores)
print("M√©dia do erro quadr√°tico m√©dio:", average_mse)

"""4.4.2. Modelo com n√∫mero de membros"""

average_mse_membros, mse_scores_membros = train_and_evaluate_knn(df_para_ml_com_membros)
print(f"MSE por fold: {mse_scores_membros}")
print(f"M√©dia do erro quadr√°tico m√©dio: {average_mse_membros}")

"""# Task
Crie uma integra√ß√£o com o Flask para exibir gr√°ficos interativos gerados anteriormente.

## Instalar bibliotecas necess√°rias

### Subtask:
Instalar Flask e outras bibliotecas de serializa√ß√£o/desserializa√ß√£o de dados, se necess√°rio.

**Reasoning**:
Install Flask and pandas using pip.
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install Flask pandas

"""## Configurar a aplica√ß√£o flask

### Subtask:
Criar um arquivo Python para a aplica√ß√£o Flask.

**Reasoning**:
Create the app.py file and initialize the Flask application.
"""

# %%
from flask import Flask

# %%
app = Flask(__name__)

"""## Carregar os dados

### Subtask:
Carregar os dados ou os arquivos JSON/CSV gerados com os resultados das an√°lises.

**Reasoning**:
Import the polars library and load the data from the specified JSON and CSV files into Polars DataFrames.

## Criar rotas para os gr√°ficos

### Subtask:
Definir rotas no Flask para cada gr√°fico que voc√™ deseja exibir.

**Reasoning**:
Import necessary libraries and define Flask routes for each chart.
"""

# %%
from flask import render_template_string
import plotly.express as px
import json
import plotly.utils


# %%
@app.route('/')
def index():
    return "<h1>Dashboard de An√°lise de Dados em S√©ries de Anime</h1><p>Acesse as rotas para visualizar os gr√°ficos:</p><ul><li><a href='/generos_frequentes'>G√™neros Mais Frequentes</a></li><li><a href='/nota_media_genero'>Nota M√©dia por G√™nero</a></li><li><a href='/combinacoes_generos'>Combina√ß√µes de G√™neros Mais Comuns</a></li><li><a href='/estudios_melhor_nota'>Est√∫dios com Melhor Nota M√©dia</a></li><li><a href='/popularidade_avaliacao'>Rela√ß√£o entre Popularidade e Avalia√ß√£o</a></li></ul>"


@app.route('/generos_frequentes')
def generos_frequentes():
    fig = px.bar(genero_freq.to_pandas(), x='Genres', y='Frequencia', title='G√™neros Mais Frequentes')
    graph_json = json.dumps(fig, cls=plotly.utils.PlotlyJSONEncoder)
    return render_template_string('''
        <html>
        <head><title>G√™neros Mais Frequentes</title></head>
        <body>
            <h1>G√™neros Mais Frequentes</h1>
            <div id="chart">{{ graphJSON | safe }}</div>
            <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
            <script>
                var graph = {{ graphJSON | safe }};
                Plotly.react('chart', graph.data, graph.layout);
            </script>
            <p><a href='/'>Voltar para o Dashboard</a></p>
        </body>
        </html>
    ''', graphJSON=graph_json)


@app.route('/nota_media_genero')
def nota_media_genero():
    fig_top = px.bar(genero_score.head(15).to_pandas(), x='Genres', y='Nota M√©dia',
                     title='Top 15 G√™neros com Melhores Notas')
    fig_bottom = px.bar(genero_score.tail(15).to_pandas(), x='Genres', y='Nota M√©dia',
                        title='15 G√™neros com Piores Notas')

    graph_json_top = json.dumps(fig_top, cls=plotly.utils.PlotlyJSONEncoder)
    graph_json_bottom = json.dumps(fig_bottom, cls=plotly.utils.PlotlyJSONEncoder)

    return render_template_string('''
        <html>
        <head><title>Nota M√©dia por G√™nero</title></head>
        <body>
            <h1>Nota M√©dia por G√™nero</h1>
            <h2>Top 15 G√™neros com Melhores Notas</h2>
            <div id="chart_top">{{ graphJSON_top | safe }}</div>
            <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
            <script>
                var graph_top = {{ graphJSON_top | safe }};
                Plotly.react('chart_top', graph_top.data, graph_top.layout);
            </script>
            <h2>15 G√™neros com Piores Notas</h2>
             <div id="chart_bottom">{{ graphJSON_bottom | safe }}</div>
            <script>
                var graph_bottom = {{ graphJSON_bottom | safe }};
                Plotly.react('chart_bottom', graph_bottom.data, graph_bottom.layout);
            </script>
            <p><a href='/'>Voltar para o Dashboard</a></p>
        </body>
        </html>
    ''', graphJSON_top=graph_json_top, graphJSON_bottom=graph_json_bottom)


@app.route('/combinacoes_generos')
def combinacoes_generos():
    fig = px.bar(combo_freq.head(15).to_pandas(), x='Genres_combination', y='Frequencia',
                 title='üîó Combina√ß√µes de G√™neros Mais Comuns (com 2 ou mais g√™neros)')
    graph_json = json.dumps(fig, cls=plotly.utils.PlotlyJSONEncoder)
    return render_template_string('''
        <html>
        <head><title>Combina√ß√µes de G√™neros Mais Comuns</title></head>
        <body>
            <h1>Combina√ß√µes de G√™neros Mais Comuns</h1>
            <div id="chart">{{ graphJSON | safe }}</div>
            <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
            <script>
                var graph = {{ graphJSON | safe }};
                Plotly.react('chart', graph.data, graph.layout);
            </script>
            <p><a href='/'>Voltar para o Dashboard</a></p>
        </body>
        </html>
    ''', graphJSON=graph_json)


@app.route('/estudios_melhor_nota')
def estudios_melhor_nota():
    fig = px.bar(
        studio_avg.head(15).to_pandas(),  # Top 15 est√∫dios com melhor nota m√©dia
        x='Studios',
        y='Nota M√©dia',
        title='üé¨ Est√∫dios com as Melhores Notas M√©dias (com pelo menos 5 animes)',
        text='Nota M√©dia',
        labels={'Studios': 'Est√∫dio', 'Nota M√©dia': 'Nota M√©dia'}
    )
    fig.update_traces(texttemplate='%{text:.2f}', textposition='outside')
    fig.update_layout(xaxis_tickangle=-45)
    graph_json = json.dumps(fig, cls=plotly.utils.PlotlyJSONEncoder)
    return render_template_string('''
        <html>
        <head><title>Est√∫dios com Melhor Nota M√©dia</title></head>
        <body>
            <h1>Est√∫dios com Melhor Nota M√©dia</h1>
            <div id="chart">{{ graphJSON | safe }}</div>
            <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
            <script>
                var graph = {{ graphJSON | safe }};
                Plotly.react('chart', graph.data, graph.layout);
            </script>
            <p><a href='/'>Voltar para o Dashboard</a></p>
        </body>
        </html>
    ''', graphJSON=graph_json)


@app.route('/popularidade_avaliacao')
def popularidade_avaliacao():
    fig = px.scatter(relacao_popularidade, x='Score', y='Members', color='Genres_combination',
                     size='Members', hover_data=['Genres_combination'],
                     title='Rela√ß√£o entre Nota e Popularidade por G√™nero')
    graph_json = json.dumps(fig, cls=plotly.utils.PlotlyJSONEncoder)
    return render_template_string('''
        <html>
        <head><title>Rela√ß√£o entre Popularidade e Avalia√ß√£o</title></head>
        <body>
            <h1>Rela√ß√£o entre Popularidade e Avalia√ß√£o</h1>
            <div id="chart">{{ graphJSON | safe }}</div>
            <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
            <script>
                var graph = {{ graphJSON | safe }};
                Plotly.react('chart', graph.data, graph.layout);
            </script>
            <p><a href='/'>Voltar para o Dashboard</a></p>
        </body>
        </html>
    ''', graphJSON=graph_json)


"""## Executar a aplica√ß√£o Flask

### Subtask:
Adicionar c√≥digo para executar a aplica√ß√£o Flask.

**Reasoning**:
Add the code to run the Flask application.
"""

# %%
if __name__ == '__main__':
    app.run(debug=True, port=5000)
